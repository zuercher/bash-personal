#!/bin/bash

# Checks if proposed push has a "Signed-off-by:" line in each commit.
# If not, emits an error for each such commit found and then aborts the push.
# Ignores pushes on master (which sometimes has unsigned commits).

REMOTE="$1"
URL="$2"

NO_SHA=0000000000000000000000000000000000000000

[ -n "${CHAIN_HOOKS_DEBUG_HELPERS}" ] && . "${CHAIN_HOOKS_DEBUG_HELPERS}"

_hooks_debug pre-push check for dco signoffs push...
_hooks_debug $'LOCAL_REF\tLOCAL_SHA\tREMOTE_REF\tREMOTE_SHA'

while read LOCAL_REF LOCAL_SHA REMOTE_REF REMOTE_SHA; do
    _hooks_debug "${LOCAL_REF}"$'\t'"${LOCAL_SHA}"$'\t'"${REMOTE_REF}"$'\t'"${REMOTE_SHA}"

    if [ "$LOCAL_SHA" = $NO_SHA -o -z "$LOCAL_SHA" ]; then
        continue
    fi

    if [ "$REMOTE_SHA" = $NO_SHA ]; then
        # New branch, check all commits not on master.
        RANGE="$(git merge-base master "$LOCAL_SHA")..${LOCAL_SHA}"
    elif [ "$LOCAL_REF" = "refs/heads/master" ]; then
        BLUE="$(tput setaf 6)"
        RESET="$(tput sgr0)"

        echo "${BLUE}WARNING: Skipping sign-off check on master${RESET}"
        continue
    else
        # Updated branch, check new commits
        RANGE="${REMOTE_SHA}..${LOCAL_SHA}"
    fi

    FAIL=false

    # N.B. process-substitution after while loop, so that vars can be set locally and not in
    # the sub-shell.
    while read REF; do
        if ! git log -n 1 --format="%B" "$REF" | grep -q -E '^Signed-off-by: '; then
            RED="$(tput setaf 1)"
            RESET="$(tput sgr0)"

            AUTHOR=`git log -n 1 --format="%an <%ae>" "$REF"`
            echo >&2 "${RED}ERROR: commit ${REF} from ${LOCAL_REF} by ${AUTHOR} is not signed-off${RESET}"
            FAIL=true
        fi
    done < <(git rev-list "$RANGE")

    if $FAIL; then
        exit 1
    fi
done
