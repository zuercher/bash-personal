#!/bin/bash

ROOT_DIR=$(cd `dirname $0` && cd .. && pwd)
HOOKS_DIR="${ROOT_DIR}/git/hooks"

function usage {
    if [ -n "$1" ]; then
        echo "ERROR: $1"
        echo
    fi
    echo Usage:
    echo "  $(basename $0) --help"
    echo "  $(basename $0) <path-to-git-repo> <hook-type ...>"
    echo "  $(basename $0) --list"
    echo
    echo "Installs hooks into the given git repository."
    echo "The --list option lists the available hook types."
    echo
    exit 1
}

function fail {
    echo "$@" >>/dev/stderr
    exit 2
}

REPO=""

function has_binary {
    type "$1" 2&>1 >/dev/null
}

function install_deps {
    if has_binary "realpath"; then
        return 0
    fi

    local OS=`uname -s`
    if [ "${OS}" != "Darwin" ]; then
        echo "realpath must be installed, and I don't know how to do that for ${OS}" >>/dev/stderr
        return 1
    fi

    if ! has_binary "brew"; then
        echo "homebrew must be installed to install coreutils (for realpath)" >>/dev/stderr
        return 1
    fi

    brew install coreutils
}

function list_categories {
    echo "Hook types:"
    for hook in $(cd  "${HOOKS_DIR}" && ls -1); do
        [ -d "${HOOKS_DIR}/${hook}" ] && echo "  ${hook}"
    done
    exit 0
}

[ -z "$1" ] && usage "must specify a git repository"

case "$1" in
    -h|-help|--help)
        usage
        ;;
    -l|-list|--list)
        list_categories
        ;;
    *)
        REPO="$1"
        ;;
esac
shift

[ -z "$1" ] && usage "must specify at least one hook category or all to install all"

GIT_DIR="${REPO}/.git"
[ -d "${GIT_DIR}" ] || usage "${GIT_DIR} does not exist or is not a directory"

GITHOOKS_DIR="$GIT_DIR/hooks"
[ -d "${GITHOOKS_DIR}" ] || usage "${GITHOOKS_DIR} does not exist or is not a directory"

function check_hook {
    local TYPE="$1"
    local HOOK_SRC="${HOOKS_DIR}/${TYPE}"
    [ -d "${HOOK_SRC}" ] || usage "invalid hook type ${TYPE}"
}

function install_chainer {
    if [ ! -x "${GITHOOKS_DIR}/chain-hooks" ]; then
        echo "Installing chain-hooks"
    else
        echo "Updating chain-hooks"
    fi

    (cd "${GITHOOKS_DIR}" && ln -sf "${HOOKS_DIR}/chain-hooks")
}

function install_hook {
    local TYPE="$1"
    local HOOK_SRC="${HOOKS_DIR}/${TYPE}"

    for name in $(cd "${HOOK_SRC}" && ls -1); do
        local HOOK="${HOOK_SRC}/${name}"
        local CHAINED_HOOK="${name}-${TYPE}"

        [ -x "${HOOK}" ] || usage "${HOOK} is not executable"

        echo "Installing ${CHAINED_HOOK} from ${HOOK}"
        (cd "${GITHOOKS_DIR}" && \
             ln -sf "${HOOK}" "${CHAINED_HOOK}" && \
             ln -sf chain-hooks "${name}") || fail "failed to install ${HOOK}"
    done
}

if ! install_deps; then
    fail "Unable to detect or install git hook dependencies."
fi

if [[ "$1" == "all" ]]; then
    for name in $(cd "${HOOKS_DIR}" && ls -1); do
        if [ -d "${HOOKS_DIR}/${name}" ]; then
            check_hook "${name}"
        fi
    done

    install_chainer

    for name in $(cd "${HOOKS_DIR}" && ls -1); do
        if [ -d "${HOOKS_DIR}/${name}" ]; then
            install_hook "${name}"
        fi
    done

    exit 0
fi

for name in $(echo "$@"); do
    if [[ "${name}" == "all" ]]; then
        usage "can only use all as the first hook type"
    fi

    check_hook "${name}"
done

if [ -n "$1" ]; then
    install_chainer

    while [ -n "$1" ]; do
        install_hook "$1"
        shift
    done
fi
